<project name="TeamCityPlugin" default="ccnet.build">


    <property name="base.dir" value="."/>

    <property name="ver.major" value="8"/>
    <property name="ver.minor" value="1"/>
    <property name="ver.build" value="0"/>
    <property name="publish.dir" value="./_publish"/>
    <property name="build.version" value="${ver.major}.${ver.minor}.${ver.build}"/>
    <property name="jar.filename" value="V1Notificator.jar"/>
    <property name="zip.filename" value="TeamCityNotificator.zip"/>
    <property name="source.zip.filename" value="TeamCityNotificator.Source.${build.version}.zip"/>

    <property name="src.dir" value="src"/>
    <property name="res.dir" value="buildServerResources"/>
    <property name="lib.dir" value="lib"/>
    <property name="test.dir" value="tests"/>
    <property name="doc.dir" value="doc"/>
	
    <property name="bin.dir" value="${base.dir}/out"/>
    <property name="bin.product.dir" value="${bin.dir}/production/"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="coverage.dir" value="coverage"/>
    <property name="coverage.classes" value="${coverage.dir}/classes"/>
    <property name="coverage.junit" value="${coverage.dir}/junit"/>
    <property name="coverage.file" value="cobertura.ser"/>

    <taskdef classpath="${lib.dir}/cobertura.jar" resource="tasks.properties">
        <classpath>
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </classpath>
    </taskdef>


    <import file="v1tsintegration.xml"/>

    <target name="package">
        <mkdir dir="${publish.dir}"/>
        <delete file="${bin.product.dir}/${zip.filename}" quiet="true"/>
        <delete file="${bin.product.dir}/${zip.filename}" quiet="true"/>
        <delete file="${bin.product.dir}/${source.zip.filename}"/>
        <zip destfile="${publish.dir}\${zip.filename}">
            <fileset dir="${bin.product.dir}" includes="*.jar"/>
            <fileset file="lib/VersionOne.APIClient.jar"/>
            <fileset file="lib/VersionOne.ObjectModel.jar"/>
            <fileset dir="." includes="${doc.dir}/**/*"/>
        </zip>

		<zip destfile="${publish.dir}/${source.zip.filename}">
			<fileset dir="${base.dir}">
				<include name="build.xml"/>
				<include name="v1tsintegration.xml"/>                
				<include name="stripDTD.xsl"/>
				<include name="src/**/*"/>
				<include name="buildServerResources/**/*"/>
				<include name="tests/**/*"/>
				<include name="lib/**/*"/>
				<include name="DocSource/**/*"/>
			</fileset>
		</zip>
    </target>

    <target name="coverage.init">
        <mkdir dir="${coverage.classes}"/>
        <mkdir dir="${coverage.junit}"/>
    </target>

    <target name="coverage.clean">
        <delete dir="${coverage.dir}"/>
        <delete file="${coverage.file}"/>
        <delete dir="${junit.output.dir}"/>
    </target>

    <target name="coverage" depends="coverage.clean, coverage.init" unless="skip.tests">
        <mkdir dir="${junit.output.dir}"/>
        <cobertura-instrument todir="${coverage.classes}" datafile="${coverage.file}">
            <fileset dir="${bin.product.dir}">
                <include name="**/*.class"/>
                <exclude name="**/tests/*Tester*.class"/>
            </fileset>
        </cobertura-instrument>

        <junit fork="true" printsummary="withOutAndErr" >
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${coverage.file}"/>

            <classpath>
                <pathelement location="${coverage.classes}"/>
                <pathelement location="${bin.product.dir}"/>
                <path refid="module.classpath"/>
            </classpath>
            <formatter type="xml"/>

            <batchtest fork="yes" todir="${junit.output.dir}">
                <fileset dir="${bin.product.dir}">
                    <include name="**/tests/*Tester.class"/>
                </fileset>
            </batchtest>
        </junit>

        <cobertura-report datafile="${coverage.file}" destdir="${coverage.dir}/html">
            <fileset dir="${src.dir}" includes="**/*"/>
        </cobertura-report>
        <cobertura-report datafile="${coverage.file}" format="xml" destdir="${coverage.dir}">
            <fileset dir="${src.dir}" includes="**/*"/>
        </cobertura-report>
        <move file="${coverage.dir}/coverage.xml" tofile="${coverage.dir}/coverage.raw"/>
        <xslt destdir="${coverage.dir}" style="${base.dir}/stripDTD.xsl"
            in="${coverage.dir}/coverage.raw" out="${coverage.dir}/coverage.xml"/>
    </target>

        <!-- Create Documentation-->
    <macrodef name="gendoc.content.base">
        <attribute name="filename"/>
        <attribute name="collect.xref.targets"/>
        <attribute name="content.doc.output.dir" default="${doc.dir}/@{filename}"/>
        <sequential>
            <mkdir dir="@{content.doc.output.dir}"/>
            <echo>${doc.source.dir} [/] ${common.dir}/docbook/xsltproc/xsltproc.exe -o ../@{content.doc.output.dir}/@{filename}.html --stringparam current.docid @{filename} --stringparam target.database.document olinkdb.xml --stringparam collect.xref.targets ${collect.xref.targets} --stringparam targets.filename @{filename}.db Common/v1integration.xsl @{filename}/@{filename}.xml</echo>
            <exec dir="${doc.source.dir}" executable="${common.dir}/docbook/xsltproc/xsltproc.exe"
                failonerror="true">
                <arg
                    line="-o ../@{content.doc.output.dir}/@{filename}.html --stringparam current.docid @{filename} --stringparam target.database.document olinkdb.xml --stringparam collect.xref.targets ${collect.xref.targets} --stringparam targets.filename @{filename}.db Common/v1integration.xsl @{filename}/@{filename}.xml"
                />
            </exec>
        </sequential>
    </macrodef>

	<target name="gendoc.clean">
        <delete dir="${doc.dir}"/>
    </target>

    <target name="gendoc" depends="gendoc.clean">
        <property name="doc.source.dir" value="${basedir}/DocSource"/>
        <property name="common.dir" value="${doc.source.dir}/Common"/>

        <mkdir dir="${doc.dir}"/>
        <mkdir dir="${doc.dir}/Common"/>

        <copy file="${doc.source.dir}/Common/v1integration.css" todir="${doc.dir}/Common"/>

        <!-- this is the index file -->
        <echo>${doc.source.dir} [/] ${common.dir}/docbook/xsltproc/xsltproc.exe -o ../${doc.dir}/index.html Common/index.xsl index.xml</echo>
        <exec dir="${doc.source.dir}" executable="${common.dir}/docbook/xsltproc/xsltproc.exe"
            failonerror="true">
            <arg line="-o ../${doc.dir}/index.html Common/index.xsl index.xml"/>
        </exec>

        <gendoc.content.base filename="V1TeamCity" collect.xref.targets="only"/>
        <gendoc.content.base filename="V1TeamCity" collect.xref.targets="no"/>

        <copy todir="${doc.dir}/V1TeamCity" flatten="false">
            <fileset dir="${doc.source.dir}/V1TeamCity">
                <include name="*.jpg"/>
            </fileset>
        </copy>
    </target>

    <target name="ccnet.build" depends="all, coverage, gendoc, package"/>

    <target name="clearall" depends="coverage.clean, clean"/>

    <target name="deploy" depends="all, package">
        <copy file="${publish.dir}\${zip.filename}" todir="c:\Java\TeamCity\.BuildServer\plugins\"/>
    </target>
</project>